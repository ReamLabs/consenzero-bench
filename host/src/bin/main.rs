use clap::Parser;
use ream_consensus::electra::beacon_state::BeaconState;
use ream_lib::{file::ssz_from_file, input::OperationInput, ssz::from_ssz_bytes};
use risc0_zkvm::{default_prover, ExecutorEnv, ProverOpts};
use std::path::PathBuf;
use tracing::info;
use tree_hash::{Hash256, TreeHash};
mod cli;
use cli::{
    fork::Fork,
    operation::{Operation, OperationHandler},
};

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{CONSENSUS_STF_ELF, CONSENSUS_STF_ID};

/// The arguments for the command.
#[derive(Parser, Debug)]
#[clap(author, version, about, long_about = None)]
struct Args {
    /// Argument for STFs
    #[clap(flatten)]
    fork: cli::fork::ForkArgs,

    #[clap(flatten)]
    operation: cli::operation::OperationArgs,

    /// Verify the correctness of the state root by comparing against consensus-spec-tests' post_state
    #[clap(long, default_value_t = true)]
    compare_specs: bool,

    /// Verify the correctness of the state root by recomputing on the host
    #[clap(long, default_value_t = false)]
    compare_recompute: bool,

    #[clap(long)]
    excluded_cases: Vec<String>,
}

fn main() {
    setup_log();

    let (fork, operation, excluded_cases, compare_specs, compare_recompute) = parse_args();

    match operation {
        Operation::Block {
            operation: block_op,
        } => {
            run_tests(
                &fork,
                &block_op,
                excluded_cases,
                compare_specs,
                compare_recompute,
            );
        }
        Operation::Epoch {
            operation: epoch_op,
        } => {
            run_tests(
                &fork,
                &epoch_op,
                excluded_cases,
                compare_specs,
                compare_recompute,
            );
        }
    }
}

fn run_tests<T: OperationHandler>(
    fork: &Fork,
    operation: &T,
    excluded_cases: Vec<String>,
    compare_specs: bool,
    compare_recompute: bool,
) {
    let (base_dir, test_cases) = operation.load_test_cases(fork);

    for test_case in test_cases {
        if excluded_cases.contains(&test_case) {
            info!("Skipping test case: {test_case}");
            continue;
        }

        info!("[{operation}] Test case: {test_case}");

        let case_dir = &base_dir.join(&test_case);
        let input = operation.prepare_input(&case_dir);
        let pre_state_ssz_bytes: Vec<u8> = ssz_from_file(&case_dir.join("pre.ssz_snappy"));

        // Setup the executor environment and inject inputs
        let env = ExecutorEnv::builder()
            // Pre-state
            .write(&pre_state_ssz_bytes.len())
            .unwrap()
            .write_slice(&pre_state_ssz_bytes)
            // Operation input
            .write(&input)
            .unwrap()
            // Build the environment
            .build()
            .unwrap();

        //
        // Prover setup & proving
        //

        let prover = default_prover();
        let opts = ProverOpts::succinct();

        let prove_info = prover
            .prove_with_opts(env, CONSENSUS_STF_ELF, &opts)
            .unwrap();

        info!("Proving complete");

        //
        // Proof verification
        //

        let receipt = prove_info.receipt;
        let new_state_root = receipt.journal.decode::<Hash256>().unwrap();

        info!("Seal size: {:#?}", receipt.seal_size());
        info!("Receipt: {:#?}", receipt);
        info!("New state root: {:?}", new_state_root);

        receipt.verify(CONSENSUS_STF_ID).unwrap();
        info!("Verfication successful. Proof is valid.");

        //
        // Compare proofs against references (consensus-spec-tests or recompute on host)
        //

        if compare_specs {
            info!("Comparing the root against consensus-spec-tests post_state");
            info!("new_state_root: {}", new_state_root);
            assert_state_root_matches_specs(&new_state_root, &pre_state_ssz_bytes, &case_dir);
        }

        if compare_recompute {
            info!("Comparing the root by recomputing on host");
            assert_state_root_matches_recompute(&new_state_root, &pre_state_ssz_bytes, &input);
        }

        info!("----- Cycle Tracker End -----");
    }
}

fn setup_log() {
    if std::env::var("RUST_LOG").is_err() {
        std::env::set_var("RUST_LOG", "info");
    }

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
}

fn parse_args() -> (Fork, Operation, Vec<String>, bool, bool) {
    let args = Args::parse();

    (
        args.fork.fork,
        args.operation.operation,
        args.excluded_cases,
        args.compare_specs,
        args.compare_recompute,
    )
}

fn assert_state_root_matches_specs(
    new_state_root: &Hash256,
    pre_state_ssz_bytes: &[u8],
    case_dir: &PathBuf,
) {
    let post_state_opt: Option<BeaconState> = {
        if case_dir.join("post.ssz_snappy").exists() {
            let ssz_bytes: Vec<u8> = ssz_from_file(&case_dir.join("post.ssz_snappy"));
            Some(from_ssz_bytes(&ssz_bytes).unwrap())
        } else {
            None
        }
    };

    match post_state_opt {
        // If the specs provide post_state, compare the computed root against post_state's root
        Some(post_state) => {
            info!("post_state provided. The state root should be mutated.");
            assert_eq!(*new_state_root, post_state.tree_hash_root());
            info!("Execution is correct! State mutated and the roots match.");
        }
        // If the specs does not contain a post_state, compare the computed root against pre_state's root
        None => {
            info!("post_state not provided. The state root should not be mutated.");
            let pre_state: BeaconState = from_ssz_bytes(&pre_state_ssz_bytes).unwrap();
            assert_eq!(*new_state_root, pre_state.tree_hash_root());
            info!("Execution is correct! State should not be mutated and the roots match.");
        }
    }
}

fn assert_state_root_matches_recompute(
    new_state_root: &Hash256,
    pre_state_ssz_bytes: &[u8],
    input: &OperationInput,
) {
    let mut state: BeaconState = from_ssz_bytes(&pre_state_ssz_bytes).unwrap();

    input.process(&mut state);

    let recomputed_state_root = state.tree_hash_root();

    println!("recomputed_state_root: {}", recomputed_state_root);
    println!("new_state_root: {}", new_state_root);

    assert_eq!(*new_state_root, recomputed_state_root);
    info!("Execution is correct! State roots match host's recomputed state root.");
}
